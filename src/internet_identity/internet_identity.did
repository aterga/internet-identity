type IdentityNumber = nat64;
type PublicKey = blob;
type CredentialId = blob;
type SessionKey = PublicKey;
type FrontendHostname = text;
type Timestamp = nat64;

type HeaderField = record {
    text;
    text;
};

type HttpRequest = record {
    method: text;
    url: text;
    headers: vec HeaderField;
    body: blob;
};

type HttpResponse = record {
    status_code: nat16;
    headers: vec HeaderField;
    body: blob;
    upgrade : opt bool;
    streaming_strategy: opt StreamingStrategy;
};

type StreamingCallbackHttpResponse = record {
    body: blob;
    token: opt Token;
};

type Token = record {};

type StreamingStrategy = variant {
    Callback: record {
        callback: func (Token) -> (StreamingCallbackHttpResponse) query;
        token: Token;
    };
};

// This describes whether an auth method is "protected" or not.
// When protected, an auth method can only be updated or removed if the
// user is authenticated with that very auth method.
type AuthProtection = variant {
    protected;
    unprotected;
};

type Challenge = record {
    png_base64: text;
    challenge_key: ChallengeKey;
};


// Map with some variants for the value type.
// Note, due to the Candid mapping this must be a tuple type thus we cannot name the fields `key` and `value`.
type MetadataMap = vec record {
    text;
    variant { map : MetadataMap; string : text; bytes : vec nat8 };
};

type RegisterResponse = variant {
    // A new identity was successfully registered.
    registered: record {
        identity_number: IdentityNumber;
    };
    // No more registrations are possible in this instance of the II service canister.
    canister_full;
    // The challenge was not successful.
    bad_challenge;
};

type AddTentativeAuthResponse = variant {
    // The auth method was tentatively added.
    added_tentatively: record {
        verification_code: text;
        // Expiration date, in nanos since the epoch
        device_registration_timeout: Timestamp;
    };
    // Authentication method registration mode is off, either due to timeout or because it was never enabled.
    auth_registration_mode_off;
    // There is another auth method already added tentatively
    another_auth_tentatively_added;
};

type VerifyTentativeAuthResponse = variant {
    // The auth method was successfully verified.
    verified;
    // Wrong verification code entered. Retry with correct code.
    wrong_code: record {
        retries_left: nat8
    };
    // Device registration mode is off, either due to timeout or because it was never enabled.
    device_registration_mode_off;
    // There is no tentative device to be verified.
    no_device_to_verify;
};

type Delegation = record {
    pubkey: PublicKey;
    expiration: Timestamp;
    targets: opt vec principal;
};

type SignedDelegation = record {
    delegation: Delegation;
    signature: blob;
};

type GetDelegationResponse = variant {
    // The signed delegation was successfully retrieved.
    signed_delegation: SignedDelegation;

    // The signature is not ready. Maybe retry by calling `prepare_delegation`
    no_such_delegation
};

type InternetIdentityStats = record {
    users_registered: nat64;
    storage_layout_version: nat8;
    assigned_user_number_range: record {
        nat64;
        nat64;
    };
    archive_info: ArchiveInfo;
    canister_creation_cycles_cost: nat64;
    active_anchor_stats: opt ActiveAnchorStatistics;
    domain_active_anchor_stats: opt DomainActiveAnchorStatistics;
    max_num_latest_delegation_origins: nat64;
    latest_delegation_origins: vec FrontendHostname
};

// Configuration parameters related to the archive.
type ArchiveConfig = record {
    // The allowed module hash of the archive canister.
    // Changing this parameter does _not_ deploy the archive, but enable archive deployments with the
    // corresponding wasm module.
    module_hash : blob;
    // Buffered archive entries limit. If reached, II will stop accepting new anchor operations
    // until the buffered operations are acknowledged by the archive.
    entries_buffer_limit: nat64;
    // The maximum number of entries to be transferred to the archive per call.
    entries_fetch_limit: nat16;
    // Polling interval to fetch new entries from II (in nanoseconds).
    // Changes to this parameter will only take effect after an archive deployment.
    polling_interval_ns: nat64;
};

// Information about the archive.
type ArchiveInfo = record {
    // Canister id of the archive or empty if no archive has been deployed yet.
    archive_canister : opt principal;
    // Configuration parameters related to the II archive.
    archive_config: opt ArchiveConfig;
};

// Rate limit configuration.
// Currently only used for `register`.
type RateLimitConfig = record {
    // Time it takes (in ns) for a rate limiting token to be replenished.
    time_per_token_ns : nat64;
    // How many tokens are at most generated (to accommodate peaks).
    max_tokens: nat64;
};

type ActiveAnchorStatistics = record {
    // Stats for the last completed collection period for daily and monthly active anchors
    completed: CompletedActiveAnchorStats;
    // ongoing periods for daily and monthly active anchors
    ongoing: OngoingActiveAnchorStats;
};

type CompletedActiveAnchorStats = record {
    daily_active_anchors: opt ActiveAnchorCounter;
    monthly_active_anchors: opt ActiveAnchorCounter;
};

type OngoingActiveAnchorStats = record {
    // Ongoing active anchor counter for the current 24 h time bucket.
    daily_active_anchors: ActiveAnchorCounter;
    // Monthly active users are collected using 30-day sliding windows.
    // This vec contains up to 30 30-day active windows each offset by one day.
    // The vec is sorted, new collection windows are added at the end.
    monthly_active_anchors: vec ActiveAnchorCounter;
};

type ActiveAnchorCounter = record {
    start_timestamp: Timestamp;
    counter: nat64;
};

type DomainActiveAnchorStatistics = record {
    // Stats for the last completed collection period for daily and monthly active anchors
    completed: DomainCompletedActiveAnchorStats;
    // ongoing periods for daily and monthly active anchors
    ongoing: DomainOngoingActiveAnchorStats;
};

type DomainCompletedActiveAnchorStats = record {
    daily_active_anchors: opt DomainActiveAnchorCounter;
    monthly_active_anchors: opt DomainActiveAnchorCounter;
};

type DomainOngoingActiveAnchorStats = record {
    // Ongoing active anchor counter for the current 24 h time bucket.
    daily_active_anchors: DomainActiveAnchorCounter;
    // Monthly active users are collected using 30-day sliding windows.
    // This vec contains up to 30 30-day active windows each offset by one day.
    // The vec is sorted, new collection windows are added at the end.
    monthly_active_anchors: vec DomainActiveAnchorCounter;
};

type DomainActiveAnchorCounter = record {
    start_timestamp: Timestamp;
    ic0_app_counter: nat64;
    internetcomputer_org_counter: nat64;
    both_ii_domains_counter: nat64;
};

// Init arguments of II which can be supplied on install and upgrade.
// Setting a value to null keeps the previous value.
type InternetIdentityInit = record {
    // Set lowest and highest anchor
    assigned_user_number_range : opt record {
        nat64;
        nat64;
    };
    // Configuration parameters related to the II archive.
    // Note: some parameters changes (like the polling interval) will only take effect after an archive deployment.
    // See ArchiveConfig for details.
    archive_config: opt ArchiveConfig;
    // Set the amounts of cycles sent with the create canister message.
    // This is configurable because in the staging environment cycles are required.
    // The canister creation cost on mainnet is currently 100'000'000'000 cycles. If this value is higher thant the
    // canister creation cost, the newly created canister will keep extra cycles.
    canister_creation_cycles_cost : opt nat64;
    // Rate limit for the `register` call.
    register_rate_limit : opt RateLimitConfig;
    // Maximum number of latest delegation origins to track.
    // Default: 1000
    max_num_latest_delegation_origins : opt nat64;
};

type ChallengeKey = text;

type ChallengeResult = record {
    key : ChallengeKey;
    chars : text;
};

// Extra information about registration status for new auth methods
type AuthRegistrationInfo = record {
    // If present, the user has tentatively added a new auth method. This
    // new auth method needs to be verified (see relevant endpoint) before
    // 'expiration'.
    tentative_auth : opt AuthRecord;
    // The timestamp at which the registration mode will expire for this identity
    // (and the tentative auth method will be forgotten, if any, and if not verified)
    expiration: Timestamp;
};


type DeployArchiveResult = variant {
    // The archive was deployed successfully and the supplied wasm module has been installed. The principal of the archive
    // canister is returned.
    success: principal;
    // Initial archive creation is already in progress.
    creation_in_progress;
    // Archive deployment failed. An error description is returned.
    failed: text;
};

type BufferedArchiveEntry = record {
    anchor_number: IdentityNumber;
    timestamp: Timestamp;
    sequence_number: nat64;
    entry: blob;
};

// This is a placeholder result that will be replaced by the real result type
// once we introduce actual errors. This is possible, because the result is
// always used in an opt position.
type result = variant {
    ok;
};

type WebAuthnDirectSigMode = variant {
    mandatory;
    optional;
};

// Authentication method
type Auth = variant {
    webauthn_key: record {
        credential_id: CredentialId;
        pubkey: PublicKey;
        // whether sensitive actions require a direct signature
        direct_signature: WebAuthnDirectSigMode;
    };
    generic_key: record {
        pubkey: PublicKey;
    };
};

type AuthRecord = record {
    auth: Auth;
    // contains now the following fields
    // - alias
    // - origin
    // - key_type: reduced to "platform", "cross_platform" on migration
    metadata: MetadataMap;
    protection: AuthProtection;
    // If a timestamp is present on write, the write will be rejected if it does
    // not match the canister side timestamp. This can be used to detect stale
    // writes.
    last_usage: opt Timestamp;
};

// Information about the identity
type IdentityInfo = record {
    // All auth methods that can authenticate to this identity
    auth_records: vec AuthRecord;
    // All auth methods that can recover this identity
    recovery_records: vec AuthRecord;
    // Auth registration status used when adding devices, see AuthRegistrationInfo
    auth_registration: opt AuthRegistrationInfo;
};

// Public information about the keys attached to the identity
type IdentityAuthInfo = record {
    auth : vec Auth;
    recovery : vec Auth;
};

type AuthSettings = record {
    protection: AuthProtection;
    direct_signature: WebAuthnDirectSigMode;
}

service : (opt InternetIdentityInit) -> {
    // registration flow
    create_captcha : () -> (opt variant { ok:Challenge});
    register_identity : (AuthRecord, ChallengeResult, opt principal) -> (opt RegisterResponse);

    // auth management
    add_auth : (IdentityNumber, AuthRecord, webauthn_sig: opt blob) -> (opt result);
    add_recovery : (IdentityNumber, AuthRecord, webauthn_sig: opt blob) -> (opt result);
    // opt timestamp to detect stale writes, if desired
    update_auth_metadata : (IdentityNumber, PublicKey, MetadataMap, opt Timestamp) -> (opt result);
    // Atomically replace a auth record matching the public key with a new one.
    replace_auth : (IdentityNumber, PublicKey, AuthRecord, webauthn_sig: opt blob) -> (opt result);
    remove_auth : (IdentityNumber, PublicKey, webauthn_sig: opt blob) -> (opt result);
    update_auth_settings : (IdentityNumber, PublicKey, AuthSettings, webauthn_sig: opt blob) -> (opt result);

    // information about the identity
    // public
    identity_auth_info : (IdentityNumber) -> (opt variant { ok: IdentityAuthInfo }) query;
    // requires authentication
    identity_info : (IdentityNumber) -> (opt variant { ok: IdentityInfo });

    // remote auth registration
    enter_auth_registration_mode : (IdentityNumber) -> (opt variant { ok: Timestamp });
    exit_auth_registration_mode : (IdentityNumber) -> (opt result);
    add_tentative_auth : (IdentityNumber, Auth, MetadataMap) -> (opt variant { ok: AddTentativeAuthResponse
    });
    verify_tentative_auth : (IdentityNumber, verification_code: text, webauthn_sig: opt blob) -> (opt variant { ok: VerifyTentativeAuthResponse
    });

    // delegation related endpoints
    // no changes
    get_principal : (IdentityNumber, FrontendHostname) -> (principal) query;
    prepare_delegation : (IdentityNumber, FrontendHostname, SessionKey, maxTimeToLive: opt nat64) -> (PublicKey, Timestamp);
    get_delegation: (IdentityNumber, FrontendHostname, SessionKey, Timestamp) -> (GetDelegationResponse) query;

    // technical endpoints, no changes
    init_salt: () -> ();
    stats: () -> (InternetIdentityStats) query;
    http_request: (request: HttpRequest) -> (HttpResponse) query;
    http_request_update: (request: HttpRequest) -> (HttpResponse);

    // archive related endpoints, no changes
    deploy_archive: (wasm: blob) -> (DeployArchiveResult);
    /// Returns a batch of entries _sorted by sequence number_ to be archived.
    /// This is an update call because the archive information _must_ be certified.
    /// Only callable by this IIs archive canister.
    fetch_entries: () -> (vec BufferedArchiveEntry);
    acknowledge_entries: (sequence_number: nat64) -> ();
}
